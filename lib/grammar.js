// Generated by CoffeeScript 2.3.1
// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function() {
  var concat, empty, grammar, id, joined, labeled, single;
  id = function(d) {
    return d[0];
  };
  empty = function() {
    return [];
  };
  single = function(d) {
    return d[0];
  };
  joined = function(d) {
    return d[0].concat(d[2]);
  };
  concat = function(d) {
    return d[0].concat([d[2]]);
  };
  labeled = function(label, extras = {}) {
    return function(d) {
      var o, value;
      value = d[1];
      o = {};
      o[label] = value;
      Object.assign(o, extras);
      return o;
    };
  };
  grammar = {
    ParserRules: [
      {
        "name": "blocks",
        "symbols": ["block"]
      },
      {
        "name": "blocks$ebnf$1",
        "symbols": ["newline"]
      },
      {
        "name": "blocks$ebnf$1",
        "symbols": ["newline",
      "blocks$ebnf$1"],
        "postprocess": function(d) {
          return [d[0]].concat(d[1]);
        }
      },
      {
        "name": "blocks",
        "symbols": ["blocks",
      "blocks$ebnf$1",
      "block"],
        "postprocess": joined
      },
      {
        "name": "block",
        "symbols": ["starter",
      "newline",
      "lines"],
        "postprocess": function(d) {
          return Object.assign(d[0],
      {
            lines: d[2]
          });
        }
      },
      {
        "name": "block",
        "symbols": ["comment"],
        "postprocess": function(d) {
          return {
            comment: d[0]
          };
        }
      },
      {
        "name": "comment$ebnf$1",
        "symbols": ["space"],
        "postprocess": id
      },
      {
        "name": "comment$ebnf$1",
        "symbols": [],
        "postprocess": function() {
          return null;
        }
      },
      {
        "name": "comment",
        "symbols": [
          {
            "literal": "#"
          },
          "comment$ebnf$1",
          "string"
        ],
        "postprocess": function(d) {
          return d[2];
        }
      },
      {
        "name": "starter",
        "symbols": ["phrase_token"],
        "postprocess": single
      },
      {
        "name": "starter",
        "symbols": ["synonym_token"],
        "postprocess": single
      },
      {
        "name": "starter",
        "symbols": ["value_token"],
        "postprocess": single
      },
      {
        "name": "phrase_token",
        "symbols": [
          {
            "literal": "%"
          },
          "word"
        ],
        "postprocess": labeled('phrase')
      },
      {
        "name": "synonym_token",
        "symbols": [
          {
            "literal": "~"
          },
          "word",
          {
            "literal": "?"
          }
        ],
        "postprocess": labeled('synonym',
      {
          optional: true
        })
      },
      {
        "name": "synonym_token",
        "symbols": [
          {
            "literal": "~"
          },
          "word"
        ],
        "postprocess": labeled('synonym')
      },
      {
        "name": "value_token$string$1",
        "symbols": [
          {
            "literal": "*"
          },
          {
            "literal": "%"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "value_token",
        "symbols": [
          {
            "literal": "$"
          },
          "word",
          "value_token$string$1",
          "word",
          {
            "literal": ":"
          },
          "joiners"
        ],
        "postprocess": function(d) {
          return Object.assign({
            value: d[1],
            expander: d[3]
          },
      d[5]);
        }
      },
      {
        "name": "value_token",
        "symbols": [
          {
            "literal": "$"
          },
          "word",
          {
            "literal": ":"
          },
          "joiners"
        ],
        "postprocess": function(d) {
          return Object.assign({
            value: d[1]
          },
      d[3]);
        }
      },
      {
        "name": "value_token",
        "symbols": [
          {
            "literal": "$"
          },
          "word",
          {
            "literal": "|"
          },
          "word"
        ],
        "postprocess": function(d) {
          return Object.assign({
            value: d[1]
          },
      {
            formatter: d[3]
          });
        }
      },
      {
        "name": "value_token$string$2",
        "symbols": [
          {
            "literal": "*"
          },
          {
            "literal": "%"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "value_token",
        "symbols": [
          {
            "literal": "$"
          },
          "word",
          "value_token$string$2",
          "word"
        ],
        "postprocess": function(d) {
          return Object.assign({
            value: d[1]
          },
      {
            expander: d[3]
          });
        }
      },
      {
        "name": "value_token",
        "symbols": [
          {
            "literal": "$"
          },
          "word"
        ],
        "postprocess": labeled('value')
      },
      {
        "name": "joiners",
        "symbols": ["token"],
        "postprocess": function(d) {
          return {
            joiner: d[0]
          };
        }
      },
      {
        "name": "joiners",
        "symbols": [
          "token",
          {
            "literal": ":"
          },
          "token"
        ],
        "postprocess": function(d) {
          return {
            joiner: d[0],
            secondary: d[2]
          };
        }
      },
      {
        "name": "joiners",
        "symbols": [
          "token",
          {
            "literal": ";"
          },
          "token"
        ],
        "postprocess": function(d) {
          return {
            joiner: d[0],
            secondary: d[2],
            oxford: true
          };
        }
      },
      {
        "name": "token",
        "symbols": ["group"],
        "postprocess": single
      },
      {
        "name": "token",
        "symbols": ["phrase_token"],
        "postprocess": single
      },
      {
        "name": "token",
        "symbols": ["synonym_token"],
        "postprocess": single
      },
      {
        "name": "token",
        "symbols": ["value_token"],
        "postprocess": single
      },
      {
        "name": "token",
        "symbols": ["word_token"],
        "postprocess": single
      },
      {
        "name": "token",
        "symbols": ["optional_token"],
        "postprocess": single
      },
      {
        "name": "optional_token",
        "symbols": [
          "token",
          {
            "literal": "?"
          }
        ],
        "postprocess": function(d) {
          return Object.assign(d[0],
      {
            optional: true
          });
        }
      },
      {
        "name": "word_token",
        "symbols": ["word"],
        "postprocess": function(d) {
          return {
            word: d[0]
          };
        }
      },
      {
        "name": "tokens",
        "symbols": ["token"]
      },
      {
        "name": "tokens",
        "symbols": ["token",
      "space",
      "tokens"],
        "postprocess": function(d) {
          return [d[0]].concat(d[2]);
        }
      },
      {
        "name": "group",
        "symbols": [
          {
            "literal": "("
          },
          "tokens",
          {
            "literal": ")"
          }
        ],
        "postprocess": function(d) {
          return {
            group: d[1]
          };
        }
      },
      {
        "name": "lines",
        "symbols": ["lines",
      "newline",
      "line"],
        "postprocess": concat
      },
      {
        "name": "lines",
        "symbols": ["line"]
      },
      {
        "name": "line",
        "symbols": ["indent",
      "tokens"],
        "postprocess": function(d) {
          return d[1];
        }
      },
      {
        "name": "newline",
        "symbols": [
          {
            "literal": "\r"
          },
          {
            "literal": "\n"
          }
        ]
      },
      {
        "name": "newline",
        "symbols": [
          {
            "literal": "\r"
          }
        ]
      },
      {
        "name": "newline",
        "symbols": [
          {
            "literal": "\n"
          }
        ],
        "postprocess": empty
      },
      {
        "name": "space",
        "symbols": [
          {
            "literal": " "
          }
        ]
      },
      {
        "name": "indent$string$1",
        "symbols": [
          {
            "literal": " "
          },
          {
            "literal": " "
          },
          {
            "literal": " "
          },
          {
            "literal": " "
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "indent",
        "symbols": ["indent$string$1"]
      },
      {
        "name": "indent",
        "symbols": [
          {
            "literal": "\t"
          }
        ]
      },
      {
        "name": "string$ebnf$1",
        "symbols": []
      },
      {
        "name": "string$ebnf$1",
        "symbols": [/[^\n]/,
      "string$ebnf$1"],
        "postprocess": function(d) {
          return [d[0]].concat(d[1]);
        }
      },
      {
        "name": "string",
        "symbols": ["string$ebnf$1"],
        "postprocess": function(d) {
          return d[0].join('');
        }
      },
      {
        "name": "word$ebnf$1",
        "symbols": []
      },
      {
        "name": "word$ebnf$1",
        "symbols": ["word_char",
      "word$ebnf$1"],
        "postprocess": function(d) {
          return [d[0]].concat(d[1]);
        }
      },
      {
        "name": "word",
        "symbols": ["word$ebnf$1"],
        "postprocess": function(d) {
          return d[0].join('');
        }
      },
      {
        "name": "word_char",
        "symbols": [/[^\s:;$%*~?()|]/]
      },
      {
        "name": "word_char",
        "symbols": ["esc_word_char"]
      },
      {
        "name": "esc_word_char$string$1",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "$"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$1"],
        "postprocess": function() {
          return "$";
        }
      },
      {
        "name": "esc_word_char$string$2",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "~"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$2"],
        "postprocess": function() {
          return "~";
        }
      },
      {
        "name": "esc_word_char$string$3",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "%"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$3"],
        "postprocess": function() {
          return "%";
        }
      },
      {
        "name": "esc_word_char$string$4",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "*"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$4"],
        "postprocess": function() {
          return "*";
        }
      },
      {
        "name": "esc_word_char$string$5",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "|"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$5"],
        "postprocess": function() {
          return "|";
        }
      },
      {
        "name": "esc_word_char$string$6",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": ":"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$6"],
        "postprocess": function() {
          return ":";
        }
      },
      {
        "name": "esc_word_char$string$7",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": ";"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$7"],
        "postprocess": function() {
          return ";";
        }
      },
      {
        "name": "esc_word_char$string$8",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "?"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$8"],
        "postprocess": function() {
          return "?";
        }
      },
      {
        "name": "esc_word_char$string$9",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": "("
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$9"],
        "postprocess": function() {
          return "(";
        }
      },
      {
        "name": "esc_word_char$string$10",
        "symbols": [
          {
            "literal": "\\"
          },
          {
            "literal": ")"
          }
        ],
        "postprocess": function(d) {
          return d.join('');
        }
      },
      {
        "name": "esc_word_char",
        "symbols": ["esc_word_char$string$10"],
        "postprocess": function() {
          return ")";
        }
      }
    ],
    ParserStart: "blocks"
  };
  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    return module.exports = grammar;
  } else {
    return window.grammar = grammar;
  }
})();
